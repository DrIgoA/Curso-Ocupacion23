visreg2d(MPPG, "perros", "gatos", plot.type = "rgl")
visreg2d(MPPG, "perros", "gatos", plot.type = "persp")
#Peso
visreg(MPPG, "Peso", type = "contrast",  scale = "response")
sapply(c(mnulo,MST,MPSexS, MPSexF, MPPG), AIC)
install.packages("easystats")
check_collinearity(MPSexS)
library(easystats)
check_collinearity(MPSexS)
check_overdispersion(MPSexS)
datos %>%
group_by(Season) %>%
summarise(mean = mean (Riqueza), sd = sd(Riqueza))
datos %>%
group_by(Sex) %>%
summarise(mean = mean (Riqueza), sd = sd(Riqueza))
datos %>%
group_by(type.x) %>%
summarise(mean = mean (Riqueza), sd = sd(Riqueza))
MRnulo <- lapply(varlist_Datos, function(x) {
glmer(substitute(Riqueza ~ 1 + (1|Farm), list(i = as.name(x))), family=poisson, data = datos, glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 100000)))
})
MR <- lapply(varlist_Datos, function(x) {
glmer(substitute(Riqueza ~ i + (1|Farm), list(i = as.name(x))), family=poisson, data = datos, glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 100000)))
})
sapply(c(MRnulo,MR), AIC)
lapply(MR, anova)
datos %>%
group_by(type.x) %>%
summarise(mean = mean (Riqueza), sd = sd(Riqueza))
lapply(MR, summary)
MRT <- glmer(Riqueza ~ type.x + (1|Farm), family=poisson, data = datos, glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 100000)))
AIC(MRnulo, MRT)
AIC(c(MRnulo, MRT))
sapply(c(MRnulo,MRT), AIC)
MRnulo <- glmer(Riqueza ~ 1 + (1|Farm), family=poisson, data = datos, glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 100000)))
sapply(c(MRnulo,MR), AIC)
sapply(c(MRnulo,MRT), AIC)
check_collinearity(MRT) #VIF OK
check_overdispersion(MRT)
visreg(MRT)
visreg(MRT, "type.x", type = "contrast")
plot_model(MRT)
plot_model(MRT, type = "pred")
plot_model(MRT, type = "pred", se=T)
plot_model(MRT, type = "pred", ci.lvl = 0.05)
plot_model(MRT, type = "pred", ci.lvl = 0.95)
plot_model(MRT, type = "pred", ci.lvl = 0.90)
plot_model(MRT, type = "eff", terms = "type.x")
plot_model(MRT, type = "eff", terms = "type.x") + theme_sjplot()
plot_model(MRT, type = "eff", terms = "type.x") + theme_blank()
plot_model(MRT, type = "eff", terms = "type.x", axis.lim = (0,3)) + theme_blank()
plot_model(MRT, type = "eff", terms = "type.x", axis.lim = (0:3)) + theme_blank()
plot_model(MRT, type = "eff", terms = "type.x", axis.lim = c(0,3)) + theme_blank()
plot_model(MRT, type = "eff", terms = "type.x", axis.lim = c(0,3), axis.title = c("Type of farm","Species' richness")) + theme_blank()
plot_model(MRT, type = "eff", terms = "type.x", axis.lim = c(0,3), axis.title = c("Type of farm","Species' richness"),  spacing = 0.2) + theme_blank()
plot_model(MRT, type = "eff", terms = "type.x", axis.lim = c(0,3), axis.title = c("Type of farm","Species' richness"),  spacing = 0.9) + theme_blank()
plot_model(MRT, type = "eff", terms = "type.x", axis.lim = c(0,3), axis.title = c("Type of farm","Species' richness"),  spacing = 0.10) + theme_blank()
plot_model(MRT, type = "eff", terms = "type.x", axis.lim = c(0,3), axis.title = c("Type of farm","Species' richness"),  legend.title = "") + theme_blank()
plot_model(MRT, type = "eff", terms = "type.x", axis.lim = c(0,3), axis.title = c("Type of farm","Species' richness"),  legend.title = " ") + theme_blank()
plot_model(MRT, type = "eff", terms = "type.x", axis.lim = c(0,3), axis.title = c("Type of farm","Species richness"), title = "") + theme_blank()
plot_model(MRT, type = "eff", terms = "type.x", axis.lim = c(0,3), axis.title = c("Type of farm","Species richness"), title = "", grid.breaks = 1) + theme_blank()
plot_model(MRT, type = "eff", terms = "type.x", axis.lim = c(0,3), axis.title = c("Type of farm","Species richness"), title = "", grid.breaks = 2) + theme_blank()
plot_model(MRT, type = "eff", terms = "type.x", axis.lim = c(0,3), axis.title = c("Type of farm","Species richness"), title = "", grid.breaks = 2) + theme_classic()
plot_model(MRT, type = "eff", terms = "type.x", axis.lim = c(0,3), axis.title = c("Type of farm","Species richness"), title = "") + theme_classic(axis.ticks.x.width = 0.5 )
plot_model(MRT, type = "eff", terms = "type.x", axis.lim = c(0,3), axis.title = c("Type of farm","Species richness"), title = "") + theme_classic()
names(datos)
table(datos$Especie, c(datos$Laelaps_echidnina, datos$Ctenocephalides_felis))
names(datos)
datos %>%
group_by(type.x) %>%
summarise(mean = mean (Laelaps_echidnina,Ctenocephalides_felis,C_m_wolffhuegeli,Polygenis_platensis_,Polygenis_rimatus,Ixodes_sp.,Polyplax_spinulosa), suma = sum(Laelaps_echidnina,Ctenocephalides_felis,C_m_wolffhuegeli,Polygenis_platensis_,Polygenis_rimatus,Ixodes_sp.,Polyplax_spinulosa))
names(datos)
datos %>%
group_by(type.x) %>%
summarise(mean = mean (Laelaps_echidnina))
datos %>%
group_by(type.x) %>%
summarise(mean = mean (c(Laelaps_echidnina,Ctenocephalides_felis)))
especies <- datos[,13:19]
summary(especies)
sum(especies)
colSums(especies)
a <- as.table(colSums(especies))
a
unlink("E:/Rodrigo/Publicaciones/Ruiz et al. 2023/Modelos_DA_Meme_cache", recursive = TRUE)
save.image("E:/Rodrigo/Publicaciones/Ruiz et al. 2023/RMark_Rodrigo_31_8_23.RData")
knitr::opts_chunk$set(echo = TRUE)
```{r, message=FALSE}
library(vegan)
library(lme4)
library(ggplot2)
library(visreg)
library(sjPlot)
library(sjmisc)
library(dplyr)
library(rgl)
library(easystats)
setwd("E:/Rodrigo/Publicaciones/Ruiz et al. 2023") #directorio de trabajo
data <- read.delim("datos_DA_meme.txt", sep = "", header = T) #ingreso la tabla
View(data)
data <- data[1:31,] #borro la ultima fila
data_ectos <- read.delim("encuesta_2.txt", sep = "\t") #ingreso la otra tabla
datos <- merge(data, data_ectos,
by.x = "Farm",
by.y = "Nombre_establecimiento")
View(data_ectos)
View(data)
data_ectos[14,1] = "Piedra_buena"
data_ectos[15,1] = "San_Jose_RP"
datos <- merge(data, data_ectos,
by.x = "Farm",
by.y = "Nombre_establecimiento")
datos$Peso <- decostand(datos$Peso, method="standardize", MARGIN = 2) #media = 0, desvio = 1
datos$LCC <- decostand(datos$LCC, method="standardize", MARGIN = 2) #media = 0, desvio = 1
datos$perros <- decostand(datos$perros, method="standardize", MARGIN = 2) #media = 0, desvio = 1
datos$gatos <- decostand(datos$gatos, method="standardize", MARGIN = 2) #media = 0, desvio = 1
datos$Peso <- decostand(datos$Peso, method="standardize", MARGIN = 2) #media = 0, desvio = 1
datos$LCC <- decostand(datos$LCC, method="standardize", MARGIN = 2) #media = 0, desvio = 1
datos$perros <- decostand(datos$perros, method="standardize", MARGIN = 2) #media = 0, desvio = 1
datos$gatos <- decostand(datos$gatos, method="standardize", MARGIN = 2) #media = 0, desvio = 1
datos %>%
group_by(Ocurrencia) %>%
summarise(n = n())
varlist_Datos <- names(datos)[c(4,5,8,9,12,26,27,32,34)] #selecciono las variables
M1 <- lapply(varlist_Datos, function(x) {
glmer(substitute(Ocurrencia ~ i + (1|Farm), list(i = as.name(x))), family=binomial, data = datos, glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 100000)))
})
lapply(M1, anova) #lapply aplica una función a una lista, en este caso la función "anova".
View(datos)
datos %>%
group_by(Season) %>%
summarise(mean = mean (abundancia), sd = sd(abundancia))
datos %>%
group_by(Season, Sex) %>%
summarise(mean = mean (abundancia), sd = sd(abundancia))
mnulo <- glmer(abundancia ~ 1 + (1|Farm), family=poisson, data = datos, glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 100000)))
M2 <- lapply(varlist_Datos, function(x) {
glmer(substitute(abundancia ~ i + (1|Farm), list(i = as.name(x))), family=poisson, data = datos, glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 100000)))
})
sapply(c(mnulo,M2), AIC) #lista de los AIC, el primero es el AIC del modelo nulo
M21 <- lapply(varlist_Datos, function(x) {
glmer(substitute(abundancia ~ Season*i + (1|Farm), list(i = as.name(x))), family=poisson, data = datos, glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 100000)))
})
sapply(c(mnulo,M21), AIC) #lista de los AIC, el primero es el AIC del modelo nulo
MST <- glmer(abundancia ~ Season*type.x + (1|Farm), family=poisson, data = datos, glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 100000)))
plot_model(MST, type = "int")
visreg(MST, "type.x", by="Season", type = "contrast", scale = "linear")
lapply(M21, summary)
lapply(M2, summary)
MPSexS <- glmer(abundancia ~ perros*Sex + Season + (1|Farm), family=poisson, data = datos, glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 100000)))
#Interacción
plot_model(MPSexS, type = "int")
visreg(MPSexS, "perros", by="Sex", type = "contrast",  scale = "linear")
#Season
visreg(MPSexS, "Season", type = "contrast",  scale = "linear")
MPSexF <- glmer(abundancia ~ perros*Sex + frecuencia + (1|Farm), family=poisson, data = datos, glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 100000)))
#Interacción
plot_model(MPSexF, type = "int")
visreg(MPSexF, "perros", by="Sex", type = "contrast",  scale = "response")
MPPG <- glmer(abundancia ~ Peso + perros*gatos + (1|Farm), family=poisson, data = datos, glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 100000)))
visreg2d(MPPG, "perros", "gatos", plot.type = "persp")
#Peso
visreg(MPPG, "Peso", type = "contrast",  scale = "response")
sapply(c(mnulo,MST,MPSexS, MPSexF, MPPG), AIC)
check_collinearity(MPSexS) #VIF OK
check_overdispersion(MPSexS) #Sobredispersión OK.
check_collinearity(MPPG)#VIF OK
check_overdispersion(MPPG) #Sobredispersión OK.
datos %>%
group_by(Season) %>%
summarise(mean = mean (Riqueza), sd = sd(Riqueza))
datos %>%
group_by(Sex) %>%
summarise(mean = mean (Riqueza), sd = sd(Riqueza))
datos %>%
group_by(type.x) %>%
summarise(mean = mean (Riqueza), sd = sd(Riqueza))
MRnulo <- glmer(Riqueza ~ 1 + (1|Farm), family=poisson, data = datos, glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 100000)))
MR <- lapply(varlist_Datos, function(x) {
glmer(substitute(Riqueza ~ i + (1|Farm), list(i = as.name(x))), family=poisson, data = datos, glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 100000)))
})
lapply(MR, anova)
lapply(MR, summary)
MRP <- glmer(Riqueza ~ perros + (1|Farm), family=poisson, data = datos, glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 100000)))
#Grafiquitos
visreg(MRP, "type.x", type = "contrast")
#Grafiquitos
visreg(MRP, "perros", type = "contrast")
plot_model(MRT, type = "eff", terms = "perros", axis.lim = c(0,3), axis.title = c("Type of farm","Species richness"), title = "") + theme_classic()
plot_model(MRP, type = "eff", terms = "perros", axis.lim = c(0,3), axis.title = c("Type of farm","Species richness"), title = "") + theme_classic()
plot_model(MRP, type = "eff", terms = "perros", axis.lim = c(0,3), axis.title = c("Standardize dogs' abundance","Species richness"), title = "") + theme_classic()
sapply(c(MRnulo,MRP), AIC)
check_overdispersion(MRT)
check_overdispersion(MRP)
rm(list = ls()) #Borro datos de la memoria
setwd("E:/Rodrigo/Publicaciones/Ruiz et al. 2023") #directorio de trabajo
data <- read.delim("datos_DA_meme.txt", sep = "", header = T) #ingreso la tabla
data <- data[1:31,] #borro la ultima fila
data_ectos <- read.delim("encuesta_2.txt", sep = "\t") #ingreso la otra tabla
names(data) #nombres de las variables de data
names(data_ectos) #nombres de las variables de data_ectos
data_ectos[14,1] = "Piedra_buena"
data_ectos[15,1] = "San_Jose_RP"
datos <- merge(data, data_ectos,
by.x = "Farm",
by.y = "Nombre_establecimiento")
library(vegan)
library(lme4)
library(ggplot2)
library(visreg)
library(sjPlot)
library(sjmisc)
library(dplyr)
library(rgl)
library(easystats)
names(datos)
datos %>%
group_by(Farm) %>%
summarise(ocurrencia = (Ocurrencia))
print(datos %>%
group_by(Farm) %>%
summarise(ocurrencia = (Ocurrencia)), n= 21)
print(datos %>%
group_by(Farm) %>%
summarise(ocurrencia = (Ocurrencia)), n= 100)
print(datos %>%
rm(list = ls())
rm(list = ls())
rm(list = ls())
# Choose constants
set.seed(1) # 'freeze' RNGs
M <- 250 # Number of sites
T <- 20 # Number of years
lambda <- 100 # Expected abundance at t = 1
gamma <- 1.02 # Population growth rate
p <- 0.6 # Detection probability
# Create array for true abundance and for counts
N <- C <- array(NA, dim = c(M, T))
# Simulate initial conditions of system: true state at t=1
N[,1] <- rpois(M, lambda)
table(N[,1]) # Summarize
# Simulate later true states
for(t in 2:T){
N[,t] <- rpois(M, N[,t-1] * gamma)
}
# Simulate binomial observation process and generate actual counts
for(t in 1:T){
C[,t] <- rbinom(M, N[,t], p)
}
par(mfrow = c(1, 3))
hist(N, breaks = 100, main = 'N', col = 'grey')
hist(C, breaks = 100, main = 'C', col = 'grey')
plot(N, C, xlab = 'True N', ylab = 'Observed C', frame = F)
abline(0,1)
lm(c(C) ~ c(N)) # Check slope corresponds to p .... OK !
par(mfrow = c(2, 2))
ylim <- range(N)
matplot(t(N), type = 'l', lty = 1, main = 'Trajectories of true N', frame = F,
ylim = ylim)
matplot(t(C), type = 'l', lty = 1, main = 'Trajectories of observed C', frame = F,
ylim = ylim)
plot(table(N[,1]), main = 'Initial N', frame = F)
plot(table(N[,T]), main = 'Final N', frame = F)
# Get Crested Tit data and look at summaries
library(AHMbook)
install.packages("AHMbook")
# Get Crested Tit data and look at summaries
library(AHMbook)
data(crestedTit)
str(dat <- crestedTit) # Marc prefers short names (comment from Mike)
C <- as.matrix(dat[,6:23]) # grab counts 1999:2016
year <- 1999:2016
#Limpio el environment
rm(list=ls())
library(jagsUI)
library(abind)
library(jagshelper)
library(beepr)
#cargo el working directory
setwd("~/GitHub/Curso-Ocupacion23/EjerciciosEjemplos/Modulo6-OcupacionComunidad")
#Cargo mis datos
data_ok<-read.csv("datos_propios.csv",header = T, sep =";")
setwd("C:/Users/Usuario 1/Documents/GitHub/Curso-Ocupacion23/evaluacion/Alonso Rodrigo/evaluacion_Alonso")
#Cargo mis datos
data_ok<-read.csv("datos_propios.csv",header = T, sep =";")
data1 <- subset(data_ok, anio == 2019)
names(data1)
data1 <- data1[,1:17]
data2 <- subset(data_ok, anio == 2021)
data2 <- data2[,1:17]
#Lista de especies
levels(as.factor(data1$especie))
species.list <- list("sp_1","sp_2","sp_3","sp_4","sp_5","sp_6","sp_7")
#Lista de años
year.list<- list("1", "2") #
#Lista de estacion del año
season.list <- list("1","2","3","4")
#Lista de sitios
site.list<- list("1", "2","3","4","5","6","7","8","9","10",
"11","12","13","14","15","16","17","18","19","20",
"21","22","23","24","25")
#Lista de repeticiones
rep.list<- list("1", "2","3")
counts.year.1 <- cbind(data1$count1, data1$count2, data1$count3)
DET.year.1 <- counts.year.1
DET.year.1[DET.year.1 > 1] <- 1
# año 2021
counts.year.2 <- cbind(data2$count1, data2$count2, data2$count3)
DET.year.2 <- counts.year.2
DET.year.2[DET.year.2 > 1] <- 1
#Para armar los array de matrices voy a usar un loop. Tengo que especificar algunos límites de los loops:
nsite <- 25 # numero de sitios
nrep <- 3 # número de repeticiones
nspec <- length(species.list)   # 7 especies
nyears <- 2 # años
nseasons <- 4
#Creo el array vacio
Y.year.1 <- array(NA, dim = c(nsite, nrep, nspec, nseasons))
Y.year.2 <- array(NA, dim = c(nsite, nrep, nspec, nseasons))
# Le doy un nombre a cada una de las dimensiones del array
#2019
dimnames(Y.year.1) <- list(site=site.list,rep= rep.list, especie=species.list, season=season.list)
dim(Y.year.1)
Y.year.1 #El array está vacio. Lo tego que llenar con los datos.
#For para completar el array. El sub indice indica qué estoy llenando y responde al orden que le di en el array. En este caso, las especies estan en el 4to lugar.
for(i in 1:nspec){
Y.year.1[,,i,] <- DET.year.1[((i-1)*nsite+1):(i*nsite),]     #i es de la especie asi te rellena para cada sp con 25 sitios
}
Y.year.1 #El array del año 1 está completo
#2021
dimnames(Y.year.2) <- list(site=site.list,rep= rep.list, especie=species.list, season=season.list)
dim(Y.year.2)
Y.year.2 #El array está vacio. Lo tego que llenar con los datos.
for(i in 1:nspec){
Y.year.2[,,i,] <- DET.year.2[((i-1)*nsite+1):(i*nsite),]     #i es de la especie asi te rellena para cada sp con 25 sitios
}
Y.year.2 #El array del año 2 está completo
#Una vez que tengo las dos matrices de los años, tengo que unir los rearreglos. Para eso uso el comando "abind"
y<-abind(Y.year.1,Y.year.2,along = 5)  # es 5 porque es en una dimension mas de las que ya tienen (filas(sitios), columnas(rep),  especies, estacion), le agrego año.
dimnames(y) <- list(site=site.list,rep= rep.list, especie=species.list, season=season.list, year=year.list)  #nombres de las dimensiones
#La matriz de "variable respuesta" (detecciones):
y
#### Variables explicativas.
#Empiezo por las coavariables más fáciles para aprender a armar la matriz correctamente:
#Variables de ocupación
#tipo de establecimiento, 1: tambo, 0: feedlot
tipo <- data_ok$tipo_t
tipo<- array(tipo, dim = c(nsite,nyears))
dimnames(tipo) <- list(site=site.list, year=year.list)  #nombres de las dimensiones
tipo #Generé una matriz con el tipo de establecimiento para los 25 sitios de cada año. Esta variable, entonces, depende del sitio y del año.
#Estacion del año
summer <- data_ok$summer
summer<- array(summer, dim = c(nsite, nyears, nseasons))
dimnames(summer) <- list(site=site.list, year=year.list, season=season.list)
dim(summer)
fall <- data_ok$fall
fall<- array(fall, dim = c(nsite, nyears, nseasons))
dimnames(fall) <- list(site=site.list, year=year.list, season=season.list)
winter <- data_ok$winter
winter<- array(winter, dim = c(nsite, nyears, nseasons))
dimnames(fall) <- list(site=site.list, year=year.list, season=season.list)
spring <- data_ok$spring
spring<- array(spring, dim = c(nsite, nyears, nseasons))
dimnames(spring) <- list(site=site.list, year=year.list, season=season.list)
#Ambientes/habitats
zanja <- data_ok$zanja
zanja<- array(zanja, dim = c(nsite, nyears))
dimnames(zanja) <- list(site=site.list, year=year.list)
galpon <- data_ok$galpon
galpon <- array(galpon, dim = c(nsite, nyears))
dimnames(galpon) <- list(site=site.list, year=year.list)
#es el ambiente "tambo" no el tipo de sistema. Es donde se ordeñan las vacas.
tambo <- data_ok$tambo
tambo <- array(tambo, dim = c(nsite, nyears))
dimnames(tambo) <- list(site=site.list, year=year.list)
vegetacion <- data_ok$vegetacion
vegetacion <- array(vegetacion, dim = c(nsite, nyears))
dimnames(vegetacion) <- list(site=site.list, year=year.list)
comedero <- data_ok$comedero
comedero <- array(comedero, dim = c(nsite, nyears))
dimnames(comedero) <- list(site=site.list, year=year.list)
silo <- data_ok$silo
silo <- array(silo, dim = c(nsite, nyears))
dimnames(silo) <- list(site=site.list, year=year.list)
foza <- data_ok$foza
foza <- array(foza, dim = c(nsite, nyears))
dimnames(foza) <- list(site=site.list, year=year.list)
#Ahora, pruebo con las variables de detección. Tengo que pensar cómo meter la temperatura (diaria) y las noches (diaria).
#Saco las temperaturas por año y estacion, las voy a unir luego
#verano 2019
data1_bis <- subset(data_ok, anio == 2019)
data1_bis <- subset(data1_bis , especie == "sp_1")
data1_bis <- subset(data1_bis, estacion == "verano")
temp1_1 <- data1_bis$temp_media_y1
#temp1_1 <- scale(temp1_1)
temp2_1 <- data1_bis$temp_media_y2
#temp2_1 <- scale(temp2_1)
temp3_1 <- data1_bis$temp_media_y3
#temp3_1 <- scale(temp3_1)
tempx_1<- abind(temp1_1, temp2_1, temp3_1)
temp_2019v<- array(tempx_1, dim = c(nsite, nrep))
#Otoño 2019
data1_bis <- subset(data_ok, anio == 2019)
data1_bis <- subset(data1_bis , especie == "sp_1")
data2_bis <- subset(data1_bis, estacion == "otonio")
temp1_o <- data2_bis$temp_media_y1
#temp1_1 <- scale(temp1_1)
temp2_o <- data2_bis$temp_media_y2
#temp2_1 <- scale(temp2_1)
temp3_o <- data2_bis$temp_media_y3
#temp3_1 <- scale(temp3_1)
temp_o_2019<- abind(temp1_o, temp2_o, temp3_o)
temp_2019o<- array(temp_o_2019, dim = c(nsite, nrep))
#Invierno 2019
data1_bis <- subset(data_ok, anio == 2019)
data1_bis <- subset(data1_bis , especie == "sp_1")
data2_bis <- subset(data1_bis, estacion == "invierno")
temp1_i <- data2_bis$temp_media_y1
#temp1_1 <- scale(temp1_1)
temp2_i <- data2_bis$temp_media_y2
#temp2_1 <- scale(temp2_1)
temp3_i <- data2_bis$temp_media_y3
#temp3_1 <- scale(temp3_1)
temp_i_2019<- abind(temp1_i, temp2_i, temp3_i)
temp_2019i<- array(temp_i_2019, dim = c(nsite, nrep))
#Primavera 2019
data1_bis <- subset(data_ok, anio == 2019)
data1_bis <- subset(data1_bis , especie == "sp_1")
data2_bis <- subset(data1_bis, estacion == "primavera")
temp1_p <- data2_bis$temp_media_y1
#temp1_1 <- scale(temp1_1)
temp2_p <- data2_bis$temp_media_y2
#temp2_1 <- scale(temp2_1)
temp3_p <- data2_bis$temp_media_y3
#temp3_1 <- scale(temp3_1)
temp_p_2019<- abind(temp1_p, temp2_p, temp3_p)
temp_2019p<- array(temp_i_2019, dim = c(nsite, nrep))
#uno todo 2019
temp_2019<-abind(temp_2019v,temp_2019o,temp_2019i,temp_2019p,along = 3)
dimnames(temp_2019) <- list(site=site.list, rep=rep.list, season=season.list)
#verano 2021
data1_bis <- subset(data_ok, anio == 2021)
data1_bis <- subset(data1_bis , especie == "sp_1")
data1_bis <- subset(data1_bis, estacion == "verano")
temp1_1 <- data1_bis$temp_media_y1
#temp1_1 <- scale(temp1_1)
temp2_1 <- data1_bis$temp_media_y2
#temp2_1 <- scale(temp2_1)
temp3_1 <- data1_bis$temp_media_y3
#temp3_1 <- scale(temp3_1)
tempx_1<- abind(temp1_1, temp2_1, temp3_1)
temp_2021v<- array(tempx_1, dim = c(nsite, nrep))
#Otoño 2021
data1_bis <- subset(data_ok, anio == 2021)
data1_bis <- subset(data1_bis , especie == "sp_1")
data2_bis <- subset(data1_bis, estacion == "otonio")
temp1_o <- data2_bis$temp_media_y1
#temp1_1 <- scale(temp1_1)
temp2_o <- data2_bis$temp_media_y2
#temp2_1 <- scale(temp2_1)
temp3_o <- data2_bis$temp_media_y3
#temp3_1 <- scale(temp3_1)
temp_o_2021<- abind(temp1_o, temp2_o, temp3_o)
temp_2021o<- array(temp_o_2021, dim = c(nsite, nrep))
#Invierno 2021
data1_bis <- subset(data_ok, anio == 2021)
data1_bis <- subset(data1_bis , especie == "sp_1")
data2_bis <- subset(data1_bis, estacion == "invierno")
temp1_i <- data2_bis$temp_media_y1
#temp1_1 <- scale(temp1_1)
temp2_i <- data2_bis$temp_media_y2
#temp2_1 <- scale(temp2_1)
temp3_i <- data2_bis$temp_media_y3
#temp3_1 <- scale(temp3_1)
temp_i_2021<- abind(temp1_i, temp2_i, temp3_i)
temp_2021i<- array(temp_i_2021, dim = c(nsite, nrep))
#Primavera 2021
data1_bis <- subset(data_ok, anio == 2021)
data1_bis <- subset(data1_bis , especie == "sp_1")
data2_bis <- subset(data1_bis, estacion == "primavera")
temp1_p <- data2_bis$temp_media_y1
#temp1_1 <- scale(temp1_1)
temp2_p <- data2_bis$temp_media_y2
#temp2_1 <- scale(temp2_1)
temp3_p <- data2_bis$temp_media_y3
#temp3_1 <- scale(temp3_1)
temp_p_2021<- abind(temp1_p, temp2_p, temp3_p)
temp_2021p<- array(temp_i_2021, dim = c(nsite, nrep))
#uno todo 2021
temp_2021<-abind(temp_2021v,temp_2021o,temp_2021i,temp_2021p,along = 3)
dimnames(temp_2021) <- list(site=site.list, rep=rep.list, season=season.list)
#junto todo en temp
temp<-abind(temp_2019, temp_2021, along = 4)
dimnames(temp) <- list(site=site.list, rep=rep.list, season=season.list, year = year.list)
#Decidí no escalar la temperatura, porque me quedaban medio raros los valores del escalado.
#Creo a la noche como variable (para ver si el hecho de remover los bichos afecta la detectabilidad)
data1_bis <- subset(data_ok, anio == 2021)
data1_bis <- subset(data1_bis , especie == "sp_1")
data2_bis <- subset(data1_bis, estacion == "primavera")
noches <- cbind(data2_bis$noche_1,data2_bis$noche_2,data2_bis$noche_3)
dimnames(noches) <- list(site=site.list, rep=rep.list)
load('mi_modelo_1.rda')
load('mi_modelo_2.rda')
load('mi_modelo_3.rda')
load('mi_modelo_4.rda')
load('mi_modelo_5.rda')
load('mi_modelo_6.rda')
#los outs que realmente me interesan
out1
out2
out3
