tmp <-sim.fn(quad.size=16,       # tama?o total del cuadrante
cell.size=2,        #tama?o de las celdas de la grilla
intensity = 0.5)    # constante, valore promedio de animales por celda
library(AHMbook)
tmp <-sim.fn(quad.size=16,       # tama?o total del cuadrante
cell.size=2,        #tama?o de las celdas de la grilla
intensity = 0.5)    # constante, valore promedio de animales por celda
tmp <-sim.fn(quad.size=16,       # tama?o total del cuadrante
cell.size=2,        #tama?o de las celdas de la grilla
intensity = 0.5)    # constante, valore promedio de animales por celda
## Simulación que muestra la relación entre "intensity" y "cell.size" y
## la ocupación y densidad media resultantes
##
## En la siguiente simulación se usa el tamaño de cuadrante por default quadrat
## (10) y se var?an los valores del tamaño de celda y de intensidad
simrep <- 100                      # Run 50 simulation reps
grain <- c(0.1,0.2,0.25,0.5,1,2)   # values will be fed into 'cell.size' argument
int <- seq(0.1, 3,,6)              # values will be fed into 'lambda' argument
n.levels <- length(grain)          # number of factor levels in simulation
results <- array(NA, dim = c(n.levels, n.levels, 2, simrep)) # 4-D array !
for(i in 1:n.levels){              # Loop over levels of factor grain
for(j in 1:n.levels){            # Loop over levels of factor intensity
for(k in 1:simrep){
cat("\nDim 1:",i, ", Dim 2:", j, ", Simrep", k)
tmp <- sim.fn(cell.size = grain[i], intensity = int[j], show.plot = F)
results[i,j,1:2,k] <- c(mean(tmp$N), tmp$psi)
}
}
}
# Plot these two prediction matrices
par(mfrow = c(2, 2), mar = c(5,5,2,2), cex.lab = 1.5, cex.axis = 1.5)
mapPalette <- colorRampPalette(c("grey", "yellow", "orange", "red"))
# Plot mean abundance in sampled quadrats
z1 <- apply(results[,,1,], c(1,2), mean)   # mean abundance
image(x=grain, y=int, z=z1, col = mapPalette(100), axes = T, xlab = "Grain size (cell.size)", ylab = "Intensity of PPP")
contour(x=grain, y=int, z=z1, add = T, col = "blue", labcex = 1.5, lwd = 1.5)
# Plot mean occupancy in sampled quadrats
z2 <- apply(results[,,2,], c(1,2), mean)   # mean occupancy
image(x=grain, y=int, z=z2, col = mapPalette(100), axes = T, xlab = "Grain size (cell.size)", ylab = "Intensity of PPP")
contour(x=grain, y=int, z=z2, add = T, col = "blue", labcex = 1.5, lwd = 1.5)
# Plot relationship between occupancy and abundance for whole range of abundance
plot(results[,,1,], results[,,2,], xlab = "Mean abundance", ylab = "Occupancy", frame = FALSE)
lines(smooth.spline(results[,,2,] ~ results[,,1,], df = 4), lwd = 3, col = "blue")
#abline(0, 1, lwd = 3)
# ... and only for very small abundance
keep <- results[,,1,] < 0.25
plot(results[,,1,][keep], results[,,2,][keep], xlab = "Mean abundance", ylab = "Occupancy", frame = FALSE)
abline(0, 1, lwd = 3)
lines(smooth.spline(results[,,2,][keep] ~ results[,,1,][keep], df = 4), lwd = 3, col = "blue")
tmp <-sim.fn(quad.size=16,       # tama?o total del cuadrante
cell.size=2,        #tama?o de las celdas de la grilla
intensity = 0.5)    # constante, valore promedio de animales por celda
y <- rpois(n = 20, lambda = 3)
hist(y, xlab = "Valores", ylab = "Frecuencia", main = "",
bty =  "n",  las = 1)
y <- rpois(n = 20, lambda = 3)
hist(y, xlab = "Valores", ylab = "Frecuencia", main = "",
bty =  "n",  las = 1)
# es importante que siempre especifiquemos los datos como una lista
data <- list(size = c(7.9,8.1,11,10.6,9.2,8,9.8,10.1,10.9,9))
# Modelo
sink("zorzales.jags")
cat("
model
{
# previas no informativas
mean ~ dnorm (0, 1.0E-6)       # tamaño medio de los zorzales
varianza ~ dlnorm (0 ,1.0E-6)  # varianza tamaño zorzales
prec <- 1/varianza             # pasar de varianza a precision
#likelihood
for (i in 1:10) {                # para cada uno de los Zorzales
size[i] ~ dnorm (mean, prec)   # tama?o zorzal trazado de una distribuci?n normal
}
}
",fill = TRUE)
sink()
# Indicamos los valores iniciales
inits <- function() list(varianza=100, mean = 10)
# MCMC settings
ni <- 10000     # numero de iteraciones
nt <- 2         # tasa de thining
nb <- 1000      # iteraciones para el burn in
nc <- 3         # numero de cadenas que corremos
# Parametros que se van monitorear
parameters <- c("mean", "varianza")
# Implementamos el modelo con jags
out <- jags(data, inits, parameters, "zorzales.jags",
n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb)
# Podemos observar la salida del modelo
out
library(jagsUI)    #paquete JAGS
# es importante que siempre especifiquemos los datos como una lista
data <- list(size = c(7.9,8.1,11,10.6,9.2,8,9.8,10.1,10.9,9))
# Modelo
sink("zorzales.jags")
cat("
model
{
# previas no informativas
mean ~ dnorm (0, 1.0E-6)       # tamaño medio de los zorzales
varianza ~ dlnorm (0 ,1.0E-6)  # varianza tamaño zorzales
prec <- 1/varianza             # pasar de varianza a precision
#likelihood
for (i in 1:10) {                # para cada uno de los Zorzales
size[i] ~ dnorm (mean, prec)   # tama?o zorzal trazado de una distribuci?n normal
}
}
",fill = TRUE)
sink()
# Indicamos los valores iniciales
inits <- function() list(varianza=100, mean = 10)
# MCMC settings
ni <- 10000     # numero de iteraciones
nt <- 2         # tasa de thining
nb <- 1000      # iteraciones para el burn in
nc <- 3         # numero de cadenas que corremos
# Parametros que se van monitorear
parameters <- c("mean", "varianza")
# Implementamos el modelo con jags
out <- jags(data, inits, parameters, "zorzales.jags",
n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb)
# Podemos observar la salida del modelo
out
# Aquí nos muestra la estructura del resultado de modelo
str(out)
plot(out)
# Previa
x <- seq(0,12, 0.5)
prior_Non <- dlnorm(x, mean = 0, sd = 1.0E-6)
plot(density(out$sims.list$mean), main = "Previa No informativa",
bty = 'l', col= "darkgreen", xlab = "")
lines(x, prior_Non,  col = 'red')                  # Agrega al grafico la previa del modelo
legend('topright', lty=1, c('Previa', "Posterior"), col = c("red", "darkgreen"),)
## Actividad ----
# 1) Como harias para agregar previas informativas a este ejercicio?
sink("zorzales-informativa.jags")
cat("
model
{
# Previas INFORMATIVAS
mean ~ dnorm (8, 1.5)       # tamaño medio de los zorzales
varianza ~ dlnorm (0 ,1.0E-6)  # varianza tamaño zorzales
prec <- 1/varianza             # pasar de varianza a precision
# Likelihood
for (i in 1:10) {                # para cada uno de los Zorzales
size[i] ~ dnorm (mean, prec)   # tama?o zorzal trazado de una distribuci?n normal
}
}
",fill = TRUE)
sink()
out_info <- jags(data, inits, parameters, "zorzales-informativa.jags",
n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb)
out
out_info
plot(density(out_info$sims.list$mean), main = "Previa informativa",
bty = 'l', col= "darkgreen",  xlab = "")
lines(x, prior_inf,  col = 'blue')                  # Agrega al grafico la previa del modelo
prior_inf <- dnorm(x, mean = 8, sd = 1.5)
lines(x, prior_inf,  col = 'blue')                  # Agrega al grafico la previa del modelo
# Genero los datos de peso para 1000 machos
set.seed(1234)
y1000 <- rnorm(n = 1000, mean = 600, sd = 30)
# Plot data
hist(y1000, col = 'grey', xlim = c(450,750), main = ' Body mass (g) of
1000 male peregrines')
# SOLUCION
library(jagsUI)
# Data
data <- list(mass = y1000, nobs = length(y1000))
#Modelo con previas no informativas
sink("peregrinos-no-informativa.jags")
cat("
model
{
# Previas No INFORMATIVAS
mean ~ dunif (0, 5000)
varianza ~ dlnorm (0 ,1.0E-6)
prec <- 1/varianza
#Likelihood
for (i in 1:nobs) {                # para cada uno de los individuos
mass[i] ~ dnorm (mean, prec)
}
}
",fill = TRUE)
sink()
# Indicamos los valores iniciales
inits <- function() list(varianza = 100, mean = rnorm(1,600))
# MCMC settings
ni <- 10000     # numero de iteraciones
nt <- 2         # tasa de thining
nb <- 1000      # iteraciones para el burn in
nc <- 3         # numero de cadenas que corremos
# Parametros que se van monitorear
parameters <- c("mean", "varianza")
# Implementamos el modelo con jags
out <- jags(data, inits, parameters, "peregrinos-no-informativa.jags",
n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb)
# Indicamos los valores iniciales
inits <- function() list(varianza = 100, mean = rnorm(1,7000))
# Implementamos el modelo con jags
out <- jags(data, inits, parameters, "peregrinos-no-informativa.jags",
n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb)
