# CI para prevalencias
#
install.packages("propCI")
# CI para prevalencias
#
install.packages(prevalence)
# CI para prevalencias
#
install.packages("prevalence")
library(prevalence)
# CI para prevalencias
#
install.packages("prevalence")
library(prevalence)
pkgbuild::has_build_tools(debug = TRUE)
install.packages("pkgbuild")
pkgbuild::has_build_tools(debug = TRUE)
install.packages("INLA", repos=c(getOption("repos"), INLA="
https://inla.r-inla-download.org/R/testing"), dep=TRUE)
install.packages("INLA", repos=c(getOption("repos"), INLA="
https://inla.r-inla-download.org/R/testing"), dep=TRUE)
install.packages("rstan",dependencies=TRUE)
install.packages (c(“bayesplot”, “brms”, “runjags”, “rstan”, “rstanarm”, “ggplot2”,
install.packages (c("bayesplot", "brms", "runjags", "rstan", "rstanarm",
"ggplot2",
"ggMCMC", "arm", "fitdistrplus", "future", "doBy",
"GGally", "ggeffects","performance",
"loo", "reshape2", "parallel", "arm", "ggdist",
"ggbreak", "DHARMa", "gamlss", "cowplot",
"ggfortify","ggeffects", "rstantools",
"ggridges"), dependencies=T)
# Hacemos una prueba
library(rstan)
options(mc.cores = parallel::detectCores())
m1<-"parameters {real y[2];}
model {y[1] ~ normal(0, 1);
y[2] ~double_exponential(0, 2);} "
install.packages("beepr")
library(beepr)
fit1<- stan(model_code=m1, iter=10, verbose=F);beep(sound = 7)
fit1<- stan(model_code=m1, iter=10, verbose=F);beep(sound = 7)
fit1<- stan(model_code=m1, iter=10, verbose=F);beep_on_error(sound = 7)
fit1<- stan(model_code=m1, iter=10, verbose=F);beep_on_error(sound = 7)
fit1<- stan(model_code=m1, iter=10, verbose=F);beep(sound = 7)
beep(7)
beep(9)
beep(1)
beep(2)
fit1<- stan(model_code=m1, iter=10, verbose=F);beep(2)
fit1<- stan(model_code=m1, iter=10, verbose=F);beep_on_error(2)
fit1<- stan(model_code=m1, iter=10, verbose=F)
install.packages("StanHeaders", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("StanHeaders", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
# Hacemos una prueba
library(rstan)
m1<-"parameters {real y[2];}
model {y[1] ~ normal(0, 1);
y[2] ~double_exponential(0, 2);} "
fit1<- stan(model_code=m1, iter=10, verbose=F)
library(prevalence)
#Prueba para prevalencia con métodos frecuentistas y métodos bayesianos. Voy a basarme en la info de Lovera 2017
# para obtener los valores de C. fasciolaris promedio, como valores a priori +- 2 sd. 2*((n*p*q*)^(1/2))
sd_prop <- function(n,p,q) {
sd_proportion <- (n*p*q)^(1/2)
return(sd_proportion)
}
sd_prop(278,109,(278-109))
sd_prop(278,109/278,(278-109)/278)
sd_prop(278,109/278,((278-109)/278))
sd_prop(278,109/278,((278-109)/278));beep(8)
sd_prop(278,109/278,((278-109)/278));beep(5)
library(beepr)
sd_prop(278,109/278,((278-109)/278));beep(5)
(109/278)*100+2a
(109/278)*100 + 2*a
a<-sd_prop(278,109/278,((278-109)/278))
(109/278)*100 + 2*a
(109/278)*100 - 2*a
propCI(36, 278, method = "all", level = 0.95, sortby = "level")
truePrev(36, 278, SE = 1, SP = 1, prior = c(0.22, 0.55),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
rn<-truePrev(36, 278, SE = 1, SP = 1, prior = c(0.22, 0.55),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
rr<-truePrev(1, 15, SE = 1, SP = 1, prior = c(0.22, 0.55),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
rr
mm<-truePrev(3, 68, SE = 1, SP = 1, prior = c(0.22, 0.55),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
mm
0.73*41
0.073*41
b<-sd_prop(41,3/41,((41-3)/41))
b
(((3/41)*100) + 2*b)/100
(((3/41)*100) - 2*b)/100
propCI(3, 41, method = "all", level = 0.95, sortby = "level")
propCI(5, 51, method = "all", level = 0.95, sortby = "level")
aa<-truePrev(5, 51, SE = 1, SP = 1, prior = c(0.04, 0.1),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
aa
aa2<-truePrev(5, 51, SE = 1, SP = 1, prior = c(0.22, 0.55),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
aa2
h1<-sd_prop(40,14,26)
((14/40)*100 + 2*h1)/100 #0.22
((14/40)*100 - 2*h1)/100 #0.55
h1<-sd_prop(40,14,26)
h1
sd_prop <- function(n,p,q) {
sd_proportion <- (n*p*q)^(1/2)/100
return(sd_proportion)
}
h1<-sd_prop(40,14,26)
((14/40) + 2*h1) #0.0276
((14/40) - 2*h1) #0.55
14/40
h1
14/40
sd_proportion <- (n*(p/n)*(q/n))^(1/2)
h1<-sd_prop(40,14,26)
sd_proportion <- (n*(p/n)*(q/n))^(1/2)
sd_prop <- function(n,p,q) {
sd_proportion <- (n*(p/n)*(q/n))^(1/2)
return(sd_proportion)
}
h1<-sd_prop(40,14,26)
h1
sd_proportion <- (((p/n)*(q/n))/n)^(1/2)
sd_prop <- function(n,p,q) {
sd_proportion <- (((p/n)*(q/n))/n)^(1/2)
return(sd_proportion)
}
h1<-sd_prop(40,14,26)
h1
((14/40) + 2*h1) #0.0276
((14/40) - 2*h1) #0.55
a<-sd_prop(278,109,(278-109))
((109/278)*100 + 2*a)/100 #0.22
((109/278)*100 - 2*a)/100 #0.55
((109/278) + 2*a) #0.22
((109/278) - 2*a) #0.55
((14/40) + 2*h1) #0.0276
((14/40) - 2*h1) #0.55
((109/278) + 2*a) #0.22
((109/278) - 2*a) #0.55
((109/278) + 2*a) #0.22
h2<-sd_prop(92,28, 64)
((28/92) + 2*h2) #0.22
((28/92) - 2*h2) #0.55
rnmaxsd<-mean(c(0.45,0.5,0.4))
rnminsd<-mean(c(0.33,0.2,0.21))
rnmaxsd
rnminsd
rn<-truePrev(36, 278, SE = 1, SP = 1, prior = c(0.24, 0.45),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
rn
#Rattus norvegicus
propCI(36, 278, method = "all", level = 0.95, sortby = "level")
#Mus musculus
h3<-sd_prop(65,9,56)
h3
((9/65) + 2*h3) #0.45
((9/65) - 2*h3) #0.33
mm<-truePrev(3, 68, SE = 1, SP = 1, prior = c(0.05, 0.22),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
mm
#Rattus rattus (uso la de Rn)
rr<-truePrev(1, 15, SE = 1, SP = 1, prior = c(0.25, 0.45),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
rr
l1<-sd_prop(41,3,38)
((3/41) + 2*l1) #0.10
((3/41) - 2*l1) #0.10
m1<-sd_prop(132,8,124)
((8/132) + 2*m1) #0.15
((8/132) - 2*m1) #0.0
aaminsd<-mean(c(0,0.01))
aamaxsd<-mean(c(0.15,0.10))
aamaxsd
aaminsd
#Akodon azarae
aa<-truePrev(5, 51, SE = 1, SP = 1, prior = c(0.005, 0.125),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
aa
propCI(5, 51, method = "all", level = 0.95, sortby = "level")
#Akodon azarae con previas de exóticas
aa2<-truePrev(5, 51, SE = 1, SP = 1, prior = c(0.25, 0.45),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
aa2
#Oligoryzomys flavescens
h4<-sd_prop(18,2,16)
((2/18) + 2*h4) #0.10
((2/18) - 2*h4) #0.01
of<-truePrev(1, 2, SE = 1, SP = 1, prior = c(0.00, 0.26),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
of<-truePrev(1, 2, SE = 1, SP = 1, prior = c(0.00001, 0.26),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
of
f1<-sd_prop(21,4,15)
((4/21) + 2*f1) #0.40
((4/21) - 2*f1) #0.21
#Rattus rattus
rr<-truePrev(1, 15, SE = 1, SP = 1, prior = c(0.03, 0.35),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
rr
f2<-sd_prop(87,12,65)
((9/65) + 2*f2) #0.22
((9/65) - 2*f2) #0.05
mean(c(0.22,0.21))
#Lutreolina crassicaudata No hay info, uso media de nativas
lcmaxsd<-mean(c(0.10,0.15,0.26))
lcmaxsd<-mean(c(0.01,0.00,0.00))
lcmaxsd
#Lutreolina crassicaudata No hay info, uso media de nativas
lcmaxsd<-mean(c(0.10,0.15,0.26))
lcmaxsd
lcmaxsd
lcmaxsd<-mean(c(0.01,0.00,0.00))
lcmaxsd
lcmaxsd<-mean(c(0.005,0.000001)) #0.003
#Lutreolina crassicaudata No hay info, uso media de nativas
lcmaxsd<-mean(c(0.125,0.26)) #0.17
lcmaxsd
lcmaxsd
lcmaxsd<-mean(c(0.005,0.000001)) #0.003
#Lutreolina crassicaudata No hay info, uso media de nativas
lcmaxsd<-mean(c(0.125,0.26)) #0.1925
lcminsd<-mean(c(0.005,0.000001)) #0.003
lcminsd
lc<-truePrev(1, 8, SE = 1, SP = 1, prior = c(0.002, 0.19),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
lc
library(prevalence)
library(beepr)
# Hacemos una prueba
library(rstan)
source("E:/Rodrigo/Publicaciones/Alonso_2023_b/prevalencia_enero.R")
install.packages("StanHeaders", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages(c("bayesplot", "brms", "runjags", "rstan", "rstanarm", "ggplot2", "ggMCMC", "arm", "fitdistrplus", "future", "doBy", "GGally", "ggeffects", "performance", "loo", "reshape2", "parallel", "arm", "ggdist", "ggbreak", "DHARMa", "gamlss", "cowplot", "ggfortify", "ggeffects", "rstantools", "ggridges"), dependencies = T)
sd_prop <- function(n,p,q) {
sd_proportion <- (((p/n)*(q/n))/n)^(1/2)
return(sd_proportion)
}
#Rattus norvegicus
propCI(36, 278, method = "all", level = 0.95, sortby = "level")
rn<-truePrev(36, 278, SE = 1, SP = 1, prior = c(0.24, 0.45),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
rn
propCI(17, 114, method = "all", level = 0.95, sortby = "level")
rn_inten<-truePrev(17, 114, SE = 1, SP = 1, prior = c(0.24, 0.45),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE);beep(11)
rn_inten
rn_inten<-truePrev(17, 114, SE = 1, SP = 1, prior = c(0.24, 0.45),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE);beep(10)
rn_inten
propCI(20, 165, method = "all", level = 0.95, sortby = "level")
rn_exten<-truePrev(20, 165, SE = 1, SP = 1, prior = c(0.24, 0.45),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
rn_exten<-truePrev(20, 165, SE = 1, SP = 1, prior = c(0.24, 0.45),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE);beep(10)
rn_exten
#Estacion
#Verano
propCI(4, 70, method = "all", level = 0.95, sortby = "level")
rn_ver<-truePrev(4, 70, SE = 1, SP = 1, prior = c(0.24, 0.45),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
rn_ver
#Verano
propCI(4, 70, method = "all", level = 0.95, sortby = "level")
rn_ver<-truePrev(4, 70, SE = 1, SP = 1, prior = c(0.24, 0.45),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
rn_ver
#otoño
propCI(12, 54, method = "all", level = 0.95, sortby = "level")
rn_oto<-truePrev(12, 54, SE = 1, SP = 1, prior = c(0.24, 0.45),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
rn_oto
#primavera
propCI(17, 97, method = "all", level = 0.95, sortby = "level")
rn_pri<-truePrev(17, 97, SE = 1, SP = 1, prior = c(0.24, 0.45),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
rn_pri
#invierno
propCI(4, 57, method = "all", level = 0.95, sortby = "level")
rn_inv<-truePrev(36, 278, SE = 1, SP = 1, prior = c(0.24, 0.45),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
rn
rn_exten
rn_inten
rn_ver
rn_oto
rn_inv
rn_pri
#inte
rr_inte<-truePrev(0, 9, SE = 1, SP = 1, prior = c(0.03, 0.35),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
rr_inte
#exte
rr_exte<-truePrev(1, 6, SE = 1, SP = 1, prior = c(0.03, 0.35),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
rr_exte
#summer
rr_sum<-truePrev(1, 7, SE = 1, SP = 1, prior = c(0.03, 0.35),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
rr_sum
#Intensive
mm_int<-truePrev(1, 29, SE = 1, SP = 1, prior = c(0.06, 0.215),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
mm_int
#Tipo
#Extensive
mm_ext<-truePrev(2, 39, SE = 1, SP = 1, prior = c(0.06, 0.215),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
mm_ext
#spring
mm_spr<-truePrev(1, 16, SE = 1, SP = 1, prior = c(0.06, 0.215),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
mm_spr
#Estacion
#summer
mm_sum<-truePrev(2, 28, SE = 1, SP = 1, prior = c(0.06, 0.215),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
mm_sum
mm
rr
aa
aa
#Tipo
#Extensive
aa_ext<-truePrev(2, 19, SE = 1, SP = 1, prior = c(0.25, 0.45),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
aa_ext
#Intensive
aa_int<-truePrev(3, 32, SE = 1, SP = 1, prior = c(0.25, 0.45),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
aa_int
#Estacion
#Fall
aa_int<-truePrev(2, 20, SE = 1, SP = 1, prior = c(0.25, 0.45),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
#Intensive
aa_int<-truePrev(3, 32, SE = 1, SP = 1, prior = c(0.25, 0.45),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
#Estacion
#Fall
aa_fall<-truePrev(2, 20, SE = 1, SP = 1, prior = c(0.25, 0.45),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
aa_fall
aa_spr<-truePrev(3, 13, SE = 1, SP = 1, prior = c(0.25, 0.45),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
aa_spr
of
lc<-truePrev(1, 8, SE = 1, SP = 1, prior = c(0.002, 0.19),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
lc
#fall
lc_fall<-truePrev(1, 1, SE = 1, SP = 1, prior = c(0.002, 0.19),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
lc_fall
plot(rn)
x11()
par(mfrow = c(2, 2))
plot(rn)
x11()
par(mfrow = c(2, 2))
plot(rn)
rn<-truePrev(36, 278, SE = 0.9, SP = 0.9, prior = c(0.24, 0.45),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
rn
#Rattus norvegicus
propCI(36, 278, method = "all", level = 0.95, sortby = "level")
rn<-truePrev(36, 278, SE = 1, SP = 1, prior = c(0.24, 0.45),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
rn
rn<-truePrev(36, 278, SE = 0.9, SP = 1, prior = c(0.24, 0.45),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
rn
rn<-truePrev(36, 278, SE = 0.9, SP = 0.9, prior = c(0.24, 0.45),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
rn
rn<-truePrev(36, 278, SE = c(0.75,1), SP = 1, prior = c(0.24, 0.45),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
rn
rn<-truePrev(36, 278, SE = 1, SP = 1, prior = c(0.24, 0.45),
nchains = 2, burnin = 10000, update = 10000,
verbose = FALSE)
rn
citation("prevalence")
citation(rjags)
citation(rjag)
library(rjags)
citation(rjag)
citation(rjags)
citation("rjags")
install.packages("blogdown")
packageVersion("blogdown")
rm(list=ls(all=TRUE))
library(jagsUI)
setwd("C:/Users/Usuario 1/Documents/GitHub/Curso-Ocupacion23/EjerciciosEjemplos/Modulo5-OcupacionSimple")
#30 predios, 2 a?os, 6 puntos por predio y 2 repeticiones
data <- read.csv("SICFLA.csv",sep ="," , header = T)
View(data)
# reacomodar los datos
data.melt=melt(data, id.var=c("Predio", "Anio", "NPunto", "Rep"), measure.var="SICFLA")
#cargo los paquetes que voy a usar
library(reshape)
library(plyr)
# reacomodar los datos
data.melt=melt(data, id.var=c("Predio", "Anio", "NPunto", "Rep"), measure.var="SICFLA")
View(data.melt)
y=cast(data.melt, Predio ~ Anio ~ NPunto ~ Rep)
y
# Si trabajo con occupancy paso todos los numero a 0 o 1
y<-aaply(y,1,function(x) {x[x>1]<-1;x})
# Verifico las dimensiones
dim(y)
View(data.melt)
data <- read.table("bluebug.txt", header = TRUE)
View(data)
View(data)
# Colectar datos en las estructuras correspondientes
y <- as.matrix(data[,4:9])         # armar matriz "as.matrix" esencial para JAGS
View(data)
# Colectar datos en las estructuras correspondientes
y <- as.matrix(data[,4:9])         # armar matriz "as.matrix" esencial para JAGS
y
y[y>1] <- 1                        # Reducir conteos a 0/1
y
